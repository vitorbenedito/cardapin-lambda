
service: cardapin 

frameworkVersion: ">=1.28.0 <2.0.0"

plugins:
  - serverless-domain-manager


custom: ${file(serverless-custom-${opt:stage, self:provider.stage, 'dev'}.yml):custom}
    
provider:
  name: aws
  profile: cardapin
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  memorySize: ${file(serverless-env-${opt:stage, self:provider.stage, 'dev'}.yml):memorySize}
  region: ${file(serverless-env-${opt:stage, self:provider.stage, 'dev'}.yml):region}
  endpointType: 'regional'
  role: ${file(serverless-env-${opt:stage, self:provider.stage, 'dev'}.yml):role}
  vpc: ${file(serverless-env-${opt:stage, self:provider.stage, 'dev'}.yml):vpc}
  environment: ${file(serverless-env-${opt:stage, self:provider.stage, 'dev'}.yml):environment}
  logs:
    restApi: true
    format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp" }'

package:
  individually: true

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.cors-admin}'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

functions:
  authorizer:
    handler: bin/user/authorizer
    package:
      artifact: bin/user/authorizer.zip

  create-client:
    handler: bin/client/createNewClient
    events:
      - http:
          path: /clients
          method: POST
          cors:
            origin: ${self:custom.cors}
    package:
      artifact: bin/client/createNewClient.zip

  update-client:
        handler: bin/client/updateClient
        events:
          - http:
              path: /clients/{phone}
              method: PUT
              cors:
                origin: ${self:custom.cors}
        package:
          artifact: bin/client/updateClient.zip

  get-client-by-phone:
    handler: bin/client/getClientByPhone
    events:
      - http:
          path: /clients/{phone}
          method: GET
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
    package:
      artifact: bin/client/getClientByPhone.zip

  update-company:
    handler: bin/company/updateCompanyHandler
    events:
      - http:
          path: /companies/{id}
          method: PUT
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/company/updateCompanyHandler.zip

  company-interested:
    handler: bin/company/companyInterested
    events:
      - http:
          path: /companies
          method: POST
          cors:
            origin: 'https://oi.cardap.in'
            headers:
              - Content-Type
    package:
      artifact: bin/company/companyInterested.zip
    vpc:
      securityGroupIds: []
      subnetIds: []
 
  patch-image:
    handler: bin/image/imagePatchHandler
    events:
      - http:
          path: /images
          method: PATCH
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/image/imagePatchHandler.zip

  create-menu:
    handler: bin/menu/createMenuHandler
    events:
      - http:
          path: /menus
          method: POST
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/menu/createMenuHandler.zip

  list-menu:
    handler: bin/menu/listAllMenuHandler
    events:
      - http:
          path: /menus/company
          method: GET
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/menu/listAllMenuHandler.zip

  list-enabled-menu:
    handler: bin/menu/listEnabledMenuHandler
    events:
      - http:
          path: /menus/company/{companyCode}/enabled
          method: GET
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
    package:
      artifact: bin/menu/listEnabledMenuHandler.zip

  enable-menu:
    handler: bin/menu/enableMenuHandler
    events:
      - http:
          path: /menus/{id}/enabled
          method: PUT
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/menu/enableMenuHandler.zip

  update-menu:
    handler: bin/menu/updateMenuHandler
    events:
      - http:
          path: /menus/{id}
          method: PUT
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/menu/updateMenuHandler.zip

  delete-menu:
    handler: bin/menu/deleteMenuHandler
    events:
      - http:
          path: /menus/{id}
          method: DELETE
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/menu/deleteMenuHandler.zip
          
  create-user:
    handler: bin/user/createUserHandler
    events:
      - http:
          path: /users
          method: POST
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/user/createUserHandler.zip

  get-user:
    handler: bin/user/getUserHandler
    events:
      - http:
          path: /users/{id}
          method: GET
    package:
      artifact: bin/user/getUserHandler.zip
        
  login:
    handler: bin/user/loginHandler
    events:
      - http:
          path: /login
          method: POST
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
    package:
      artifact: bin/user/loginHandler.zip

  list-payment-types:
    handler: bin/configuration/listPaymentTypesHandler
    events:
      - http:
          path: /payment-types
          method: GET
          cors:
            origin: ${self:custom.cors}
            headers:
              - Content-Type
              - x-cardapin-auth-token
            allowCredentials: true
          authorizer: 
            name: ${self:custom.authorizerName}
            identitySource: ${self:custom.identitySource}
    package:
      artifact: bin/configuration/listPaymentTypesHandler.zip

  list-sections:
      handler: bin/configuration/listSectionsHandler
      events:
        - http:
            path: /sections
            method: GET
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/configuration/listSectionsHandler.zip

  create-table:
      handler: bin/table/createTableHandler
      events:
        - http:
            path: /tables
            method: POST
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/table/createTableHandler.zip

  update-table:
      handler: bin/table/updateTableHandler
      events:
        - http:
            path: /tables/{id}
            method: PUT
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/table/updateTableHandler.zip
            
  delete-table:
      handler: bin/table/deleteTableHandler
      events:
        - http:
            path: /tables/{id}
            method: DELETE
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/table/deleteTableHandler.zip

  list-table:
      handler: bin/table/listTableHandler
      events:
        - http:
            path: /tables/company/{id}
            method: GET
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/table/listTableHandler.zip
  
  create-group:
      handler: bin/group/createGroup
      events:
        - http:
            path: /additional-items-groups
            method: POST
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/group/createGroup.zip

  update-group:
      handler: bin/group/updateGroup
      events:
        - http:
            path: /additional-items-groups/{id}
            method: PUT
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/group/updateGroup.zip

  list-group:
      handler: bin/group/listGroup
      events:
        - http:
            path: /additional-items-groups/company/{id}
            method: GET
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/group/listGroup.zip

  delete-group:
      handler: bin/group/deleteGroup
      events:
        - http:
            path: /additional-items-groups/{id}
            method: DELETE
            cors:
              origin: ${self:custom.cors}
              headers:
                - Content-Type
                - x-cardapin-auth-token
              allowCredentials: true
            authorizer: 
              name: ${self:custom.authorizerName}
              identitySource: ${self:custom.identitySource}
      package:
        artifact: bin/group/deleteGroup.zip